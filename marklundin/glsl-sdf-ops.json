{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/marklundin/glsl-sdf-ops\">Distance field operations</a><div class=\"contrib\"></div></h1>\n<p>A collection of useful operators and modifiers for distance field equations from iQ&apos;s excellent <a href=\"http://iquilezles.org/www/articles/distfunctions/distfunctions.htm\">distance functions</a> page. They can be used with <a href=\"https://github.com/stackgl/glslify\">glsl-sdf-primitives</a> for combining and transforming basic primitive shapes. </p>\n<p>Operators include <code>union</code>, <code>subtract</code>, <code>intersect</code> and modifier include <code>repeat</code>, <code>rotate</code> and <code>twist</code>.</p>\n<p>The library is compatible with <a href=\"https://github.com/stackgl/glslify\">glslify</a>.</p>\n<h2 id=\"usage\">Usage</h2>\n<pre><code>vec2 doModel(vec3 p);\n#pragma glslify: raytrace = require(&apos;glsl-raytrace&apos;, map = doModel, steps = 90)\n\n// import some operators\n#pragma glslify: opU     = require(&apos;glsl-sdf-ops/union&apos;)\n#pragma glslify: opTwist     = require(&apos;glsl-sdf-ops/twist&apos;)\n\n// import a couple of primitives\n#pragma glslify: sdTorus     = require(&apos;glsl-sdf-primitives/sdTorus&apos;)\n#pragma glslify: sdSphere     = require(&apos;glsl-sdf-primitives/sdSphere&apos;)\n\nvec2 doModel(vec3 p) {\n  return opU( vec2( sdTorus( opTwist( p ), vec2( 0.20, 0.05 )), 0.0 )),\n              vec2( sdSphere( p, 0.2, 0.0 ), 1.0 ));\n}\n</code></pre><h2 id=\"operators\">Operators</h2>\n<p><code>intersection</code>, <code>union</code>, <code>subtract</code></p>\n<h2 id=\"modifiers\">Modifiers</h2>\n<p><code>twist</code>, <code>bend</code>, <code>repeat</code>, <code>rotate-translate</code></p>\n<h2 id=\"ray-marching\">Ray Marching</h2>\n<p><code>ao</code>, <code>soft-shadow</code></p>\n"}