{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/hughsk/glsl-testify\">glsl-testify </a><div class=\"contrib\"></div></h1>\n<p><a href=\"https://nodei.co/npm/glsl-testify/\"></a></p>\n<p>Test your GLSL shaders using GLSL!</p>\n<p>glsl-testify allows you to write tests inside your GLSL shaders, which can then be\neasily executed using the included CLI tool or manually run using the module\nAPI.</p>\n<h2 id=\"writing-a-test\">Writing a Test</h2>\n<p>To create a test, simply define a function in your shader that begins with <code>test</code>,\nand returns a <code>bool</code>, e.g.:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>bool</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>test_will_pass</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"keyword control glsl\"><span>return</span></span><span>&#xA0;</span><span class=\"constant language c\"><span>true</span></span><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n<p>If the function returns <code>true</code>, then the test is considered passed. glsl-testify\nworks by generating a shader for each test, and then checking the result of\nrendering to a single pixel: a pass is white, and a fail is black.</p>\n<p>Using the module API, you&apos;ll get back this collection of shaders directly, meaning\nthat you get the flexibility to work with said shaders however you please.</p>\n<h2 id=\"cli-usage\">CLI Usage</h2>\n<pre><code>Usage: glsl-testify [file]\n\nTakes a testable GLSL shader as input, spawning a temporary browser\nwindow and runs the tests without any uniforms. Outputs TAP, so\nyou can pass this on to other testing tools to deal with the results.\n</code></pre><p>For example:</p>\n<pre><code class=\"lang-bash\"><div class=\"line\"><span class=\"source shell\"><span class=\"comment line number-sign shell\"><span class=\"punctuation definition comment shell\"><span>#</span></span><span>&#xA0;Install&#xA0;your&#xA0;tools&#xA0;globally</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;install&#xA0;-g&#xA0;glsl-testify&#xA0;tap-spec</span></span></div><div class=\"line\"><span class=\"source shell\"><span class=\"comment line number-sign shell\"><span class=\"punctuation definition comment shell\"><span>#</span></span><span>&#xA0;Pipe&#xA0;your&#xA0;shader&#xA0;through&#xA0;glsl-testify&#xA0;to&#xA0;tap-spec</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source shell\"><span class=\"comment line number-sign shell\"><span class=\"punctuation definition comment shell\"><span>#</span></span><span>&#xA0;for&#xA0;nice&#xA0;test&#xA0;output!</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source shell\"><span>cat&#xA0;example.glsl&#xA0;</span><span class=\"keyword operator pipe shell\"><span>|</span></span><span>&#xA0;glsl-testify&#xA0;</span><span class=\"keyword operator pipe shell\"><span>|</span></span><span>&#xA0;tap-spec</span></span></div>\n</code></pre>\n<p>While the current tool opens a browser window to run the test, hopefully\nin the future we&apos;ll be able to get WebGL running headlessly in node\nfor easier CI.</p>\n<p><img src=\"http://imgur.com/llQPhBp.png\" alt=\"example\"></p>\n<h2 id=\"module-usage\">Module Usage</h2>\n<h3 id=\"stream-testify-done-err-tests-\">stream = testify(done(err, tests))</h3>\n<p>Returns a stream that expects input from\n<a href=\"http://github.com/chrisdickinson/glsl-parser\">glsl-parser</a>, calling\n<code>done</code> with the resulting test shaders when complete.</p>\n<p>For example:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;tokenizer&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>glsl-tokenizer</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;testify&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>glsl-testify</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;parser&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>glsl-parser</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;fs&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>fs</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>fs</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>createReadStream</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>example.glsl</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>pipe</span><span class=\"meta brace round js\"><span>(</span></span><span>tokenizer</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>pipe</span><span class=\"meta brace round js\"><span>(</span></span><span>parser</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>pipe</span><span class=\"meta brace round js\"><span>(</span></span><span>testify</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span class=\"punctuation definition parameters begin js\"><span>(</span></span><span class=\"variable parameter function js\"><span>err</span></span><span class=\"meta object delimiter js\"><span>,</span></span><span>&#xA0;</span><span class=\"variable parameter function js\"><span>testShaders</span></span><span class=\"punctuation definition parameters end js\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"keyword control js\"><span>if</span></span><span>&#xA0;</span><span class=\"meta brace round js\"><span>(</span></span><span>err</span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"keyword control js\"><span>throw</span></span><span>&#xA0;err</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"entity name type object js console\"><span>console</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js console\"><span>log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>testShaders</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>test_pass</span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"entity name type object js console\"><span>console</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js console\"><span>log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>testShaders</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>test_fail</span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span><span>)</span></span></span></div>\n</code></pre>\n<p>Each test is simply a fragment shader which will draw white if\nthe test has passed or black if it fails. You can run these using\nyour own tools, for example to add uniform/attributes as input.</p>\n<h2 id=\"license\">License</h2>\n<p>MIT. See <a href=\"http://github.com/hughsk/glsl-testify/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}