{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/mikolalysenko/cdt2d\">cdt2d</a><div class=\"contrib\"></div></h1>\n<p><iframe scrolling=\"no\" seamless=\"seamless\" src=\"http://mikolalysenko.github.io/cdt2d/\"></iframe></p>\n<p>A robust 2D <a href=\"https://en.wikipedia.org/wiki/Constrained_Delaunay_triangulation\">constrained Delaunay triangulation</a> library written in JavaScript.</p>\n<p><strong>WORK IN PROGRESS</strong></p>\n<h2 id=\"-demo-https-mikolalysenko-github-io-cdt2d-\"><a href=\"https://mikolalysenko.github.io/cdt2d\">Demo</a></h2>\n<p>To test out this module, you can open up a demo in your browser with the following link:</p>\n<p><a href=\"https://mikolalysenko.github.io/cdt2d\"><img src=\"https://raw.githubusercontent.com/mikolalysenko/cdt2d/master/img/demo.png\"></a></p>\n<h4 id=\"-cdt2d-demo-https-mikolalysenko-github-io-cdt2d-\"><a href=\"https://mikolalysenko.github.io/cdt2d\">cdt2d demo</a></h4>\n<ul>\n<li>Click to add points</li>\n<li>Click on a point to remove it</li>\n<li>Drag one point onto another to add an edge constraint</li>\n<li>Click on a green edge to remove a constraint</li>\n<li>Toggle options by clicking on the checkboxes on the left</li>\n<li>Click reset to clear all points</li>\n</ul>\n<h2 id=\"examples\">Examples</h2>\n<h2 id=\"simple-example\">Simple example</h2>\n<p>Here is a simple example showing how to invoke <code>cdt2d</code>:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>First&#xA0;we&#xA0;need&#xA0;to&#xA0;reqire&#xA0;the&#xA0;module</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;cdt2d&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>cdt2d</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Then&#xA0;we&#xA0;define&#xA0;a&#xA0;list&#xA0;of&#xA0;points,&#xA0;represented&#xA0;as&#xA0;pairs&#xA0;of&#xA0;x,y&#xA0;coordinates</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;points&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Next&#xA0;we&#xA0;can&#xA0;optionally&#xA0;define&#xA0;some&#xA0;edge&#xA0;constraints</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;This&#xA0;set&#xA0;of&#xA0;edges&#xA0;determines&#xA0;a&#xA0;pair&#xA0;of&#xA0;loops</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;edges&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation whitespace comment leading js\"><span>&#xA0;</span></span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Outer&#xA0;loop</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>3</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>3</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation whitespace comment leading js\"><span>&#xA0;</span></span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Inner&#xA0;loop</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>4</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>5</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>5</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>6</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>6</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>7</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>7</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>4</span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Finally&#xA0;we&#xA0;call&#xA0;cdt2d&#xA0;with&#xA0;the&#xA0;points&#xA0;and&#xA0;edges</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;The&#xA0;flag&#xA0;{exterior:&#xA0;false}&#xA0;tells&#xA0;&#xA0;it&#xA0;to&#xA0;remove&#xA0;exterior&#xA0;faces</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js console\"><span>log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>cdt2d</span><span class=\"meta brace round js\"><span>(</span></span><span>points</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;edges</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span><span>exterior</span><span class=\"keyword operator js\"><span>:</span></span><span>&#xA0;</span><span class=\"constant language boolean false js\"><span>false</span></span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span><span>)</span></span></span></div>\n</code></pre>\n<h4 id=\"output\">Output</h4>\n<p>The above program will output the following triangles:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>3</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>7</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>6</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>7</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>6</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>5</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>2</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>6</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>5</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>4</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>3</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>5</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>4</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>3</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>4</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>7</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>]</span></span></span></div>\n</code></pre>\n<p>Each triangle is represented as an array of 3 indices of points.  We can visualize this data in the following figure:</p>\n<p><img src=\"https://raw.githubusercontent.com/mikolalysenko/cdt2d/master/img/example-cdt.png\"></p>\n<h2 id=\"messy-graphs\">Messy graphs</h2>\n<p>If your input doesn&apos;t satisfy the validity invariants (ie no self intersections, duplicate vertices or t-junctions), then you will need to preprocess it to clean it up.  One way to do this is with the <a href=\"https://github.com/mikolalysenko/clean-pslg\"><code>clean-pslg</code> module</a>.  Here is an example showing how to do this:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;cleanPSLG&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>clean-pslg</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;cdt2d&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>cdt2d</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;points&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;edges&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>This&#xA0;updates&#xA0;points/edges&#xA0;so&#xA0;that&#xA0;they&#xA0;now&#xA0;form&#xA0;a&#xA0;valid&#xA0;PSLG</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>cleanPSLG</span><span class=\"meta brace round js\"><span>(</span></span><span>points</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;edges</span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Generate&#xA0;the&#xA0;triangulation</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js console\"><span>log</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;points</span><span class=\"keyword operator js\"><span>:</span></span><span>&#xA0;points</span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;edges</span><span class=\"keyword operator js\"><span>:</span></span><span>&#xA0;edges</span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;triangles</span><span class=\"keyword operator js\"><span>:</span></span><span>&#xA0;cdt2d</span><span class=\"meta brace round js\"><span>(</span></span><span>points</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;edges</span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span></span></div>\n</code></pre>\n<h4 id=\"output\">Output</h4>\n<p><strong>TODO</strong></p>\n<h2 id=\"polygon-example\">Polygon example</h2>\n<p>It is also pretty easy to use this module with polygons, as one would get from a GeoJSON file.  To do this, it is first necessary to convert them into a planar straight line graph.  This can be done using the <code>poly-to-pslg</code> module:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;toPSLG&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>poly-to-pslg</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;cdt2d&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>cdt2d</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div>\n</code></pre>\n<p><strong>TODO</strong></p>\n<h2 id=\"polygon-with-holes-example\">Polygon with holes example</h2>\n<p>The above procedure even works if the polygons have holes:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;toPSLG&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>poly-to-pslg</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;cdt2d&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>cdt2d</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div>\n</code></pre>\n<p><strong>TODO</strong></p>\n<h2 id=\"delaunay-triangulation\">Delaunay triangulation</h2>\n<p>You can also use <code>cdt2d</code> to generate Delaunay triangulations of arbitrary point sets in the plane:</p>\n<pre><code class=\"lang-javascript\">\n</code></pre>\n<p><strong>TODO</strong></p>\n<h2 id=\"install\">Install</h2>\n<p>This module works in any modern CommonJS environment.  You can install it using <a href=\"https://docs.npmjs.com/\">npm</a> with the following command:</p>\n<pre><code>npm i cdt2d\n</code></pre><p>You should be able to then use it in <a href=\"https://nodejs.org/\">node</a> or on the web with <a href=\"http://browserify.org/\">browserify</a>.</p>\n<h2 id=\"api\">API</h2>\n<h4 id=\"-var-cells-require-cdt2d-points-edges-options-\"><code>var cells = require(&apos;cdt2d&apos;)(points[, edges, options])</code></h4>\n<p>Constructs a constrained Delaunay triangulation of a <a href=\"https://en.wikipedia.org/wiki/Planar_graph\">planar straight-line graph</a>.</p>\n<ul>\n<li><code>points</code> are the vertices of the triangulation, represented by pairs of numbers.</li>\n<li><code>edges</code> is an optional list of edge constraints which must occur within the triangulation. These constraints are given by pairs of indices of points.  If not specified, then no constraints are used.</li>\n<li><code>options</code> is an object which takes some optional parameters.<ul>\n<li><code>delaunay</code> if this flag is set to true, then the resulting triangulation is converted to a <a href=\"https://en.wikipedia.org/wiki/Delaunay_triangulation\">Delaunay triangulation</a> by edge flipping.  Otherwise if it is false, then an arbitrary triangulation is returned.  (Default <code>true</code>)</li>\n<li><code>interior</code> if set, only return interior faces. See note. (Default <code>true</code>)</li>\n<li><code>exterior</code> if set, only return exterior faces. See note. (Default <code>true</code>)</li>\n<li><code>infinity</code> if set, then the triangulation is augmented with a <a href=\"https://en.wikipedia.org/wiki/Point_at_infinity\">point at infinity</a> represented by the index <code>-1</code>.  (Default <code>false</code>)</li>\n</ul>\n</li>\n</ul>\n<p><strong>Returns</strong> A list of all triangles represented as triples of indices of vertices</p>\n<p><strong>Note on interior/exterior classification</strong> Interior/exterior faces are classified by treating the constraint edges as the boundary and traversing the triangulation. The point at infinity is in the exterior of the set, and other faces are classified by the parity of the path with fewest crossings from the face to the point at infinity.</p>\n<p><strong>Assumptions</strong> This module makes the following assumptions about the points and edge constraints:</p>\n<ul>\n<li>No point in the input is duplicated</li>\n<li>No pair of edge constraints cross in their relative interior</li>\n<li>No point is contained in the relative interior of an edge (ie no T-junctions)</li>\n</ul>\n<p>If your input does not satisfy these conditions, you will need to preprocess it first (using <a href=\"https://github.com/mikolalysenko/clean-pslg\"><code>clean-pslg</code></a> for example) otherwise <code>cdt2d</code> may return incorrect results.</p>\n<p><strong>Limitations</strong> Currently there is no way to specify that only some edge constraints are to be included in the boundary.  It is also not possible to add a constraint from a vertex to the point at infinity. If there is enough demand I may add these features or perhaps create a separate module.</p>\n<h2 id=\"benchmarks-and-comparisons\">Benchmarks and comparisons</h2>\n<p>Assertion: <code>cdt2d</code> is the only non-broken triangulation library in JavaScript.</p>\n<ul>\n<li><strong>TODO</strong> Catalogue failing cases for other libraries</li>\n<li><strong>TODO</strong> Need to measure performance and finetune</li>\n</ul>\n<p>Libraries to compare against:</p>\n<ul>\n<li><code>earcut</code></li>\n<li><code>poly2tri</code></li>\n<li><code>pnltri</code></li>\n<li><code>libtess.js</code></li>\n</ul>\n<h2 id=\"license\">License</h2>\n<p>(c) 2015 Mikola Lysenko. MIT License</p>\n"}