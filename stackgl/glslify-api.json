{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/stackgl/glslify-api\">glslify-api </a><div class=\"contrib\"></div></h1>\n<p>An API and accompanying client for generating\n<a href=\"http://github.com/stackgl/glslify\">glslify</a> shaders in the browser.</p>\n<p>This is done by running glslify in the browser, but redirecting its functions\nto read and resolve modules to a thin server. Files are cached locally\nusing <a href=\"https://github.com/maxogden/level.js\">level.js</a> to speed up the\nbundling speed after the first run &#x2013; it can even work offline after downloading\nthe required package once!</p>\n<p>See the <a href=\"http://github.com/stackgl/glslify-api/tree/master/example\">example</a>\ndirectory for a simple example.</p>\n<p><a href=\"https://nodei.co/npm/glslify-api/\"></a></p>\n<h2 id=\"usage-server\">Usage: Server</h2>\n<h3 id=\"-handle-api-cachedir-\"><code>handle = api([cachedir])</code></h3>\n<p>Returns an express-style route handler. <code>cachedir</code> is the location to store\ntemporary packages (using <a href=\"http://github.com/hughsk/npm-file\">npm-file</a>),\nand defaults to <code>.glslify</code>.</p>\n<h3 id=\"-handle-req-res-next-\"><code>handle(req, res, next)</code></h3>\n<p>Given a request and response pair, handle a route. Will call <code>next</code> if there\nis an error or a appropriate route is not found.</p>\n<h2 id=\"usage-browser\">Usage: Browser</h2>\n<h3 id=\"-getshader-api-serveruri-options-\"><code>getShader = api(serverURI, [options])</code></h3>\n<p>Returns a function for compiling shaders within the browser. <code>serverURI</code>\nshould be the URI where you&apos;re hosting your copy of the <code>glslify-api</code> server &#x2013;\nif you don&apos;t pass one in that&apos;s OK too, there&apos;s one being hosted at\n<a href=\"http://glslify.shader.club/\">glslify.shader.club</a>.</p>\n<p>Available options:</p>\n<ul>\n<li><code>ttl</code>: the maximum amount of time to cache a file locally, in milliseconds.</li>\n</ul>\n<h3 id=\"-getshader-source-done-err-result-\"><code>getShader(source, done(err, result))</code></h3>\n<p>Pass in a shader body <code>source</code>, and <code>done</code> will be called with either an error\nor the glslified shader when ready.</p>\n<h2 id=\"http-api\">HTTP API</h2>\n<h3 id=\"-get-\"><code>GET /</code></h3>\n<p>Should return:</p>\n<pre><code class=\"lang-json\"><div class=\"line\"><span class=\"source json\"><span class=\"meta structure dictionary json\"><span class=\"punctuation definition dictionary begin json\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source json\"><span class=\"meta structure dictionary json\"><span>&#xA0;&#xA0;</span><span class=\"string quoted double json\"><span class=\"punctuation definition string begin json\"><span>&quot;</span></span><span>glslify</span><span class=\"punctuation definition string end json\"><span>&quot;</span></span></span><span class=\"meta structure dictionary value json\"><span class=\"punctuation separator dictionary key-value json\"><span>:</span></span><span>&#xA0;</span><span class=\"constant language json\"><span>true</span></span></span></span></span></div><div class=\"line\"><span class=\"source json\"><span class=\"meta structure dictionary json\"><span class=\"punctuation definition dictionary end json\"><span>}</span></span></span></span></div>\n</code></pre>\n<h3 id=\"-post-shader-\"><code>POST /-/shader</code></h3>\n<p>Pipe a whole shader to the request body and get a glslified shader in\nreturn. This is a little more blunt than the approach in the client, but\ncan be useful for small, quick experiments.</p>\n<h3 id=\"-get-package-file-\"><code>GET /:package/:file...</code></h3>\n<p>Returns the raw contents of <code>file</code> from the <code>package</code> package on npm.</p>\n<h2 id=\"license\">License</h2>\n<p>MIT. See <a href=\"http://github.com/stackgl/glslify-api/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}