{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/stackgl/glsl-parser\">glsl-parser</a><div class=\"contrib\"></div></h1>\n<p>\n\n\n</p>\n<p>A GLSL parser that takes tokens from\n<a href=\"http://github.com/stackgl/glsl-tokenizer\">glsl-tokenizer</a> and turns them into\nan AST.</p>\n<p>May either be used synchronously or as a stream.</p>\n<h2 id=\"api\">API</h2>\n<h3 id=\"-stream-require-glsl-parser-stream-\"><code>stream = require(&apos;glsl-parser/stream&apos;)</code></h3>\n<p>Creates a GLSL parser stream, which emits nodes as they&apos;re parsed.</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;TokenStream&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>glsl-tokenizer/stream</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;ParseStream&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>glsl-parser/stream</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;fs&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>fs</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>fs</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>createReadStream</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>test.glsl</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>pipe</span><span class=\"meta brace round js\"><span>(</span></span><span>TokenStream</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>pipe</span><span class=\"meta brace round js\"><span>(</span></span><span>ParseStream</span><span class=\"meta brace round js\"><span>(</span><span>)</span><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>on</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>data</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span class=\"punctuation definition parameters begin js\"><span>(</span></span><span class=\"variable parameter function js\"><span>x</span></span><span class=\"punctuation definition parameters end js\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"entity name type object js console\"><span>console</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js console\"><span>log</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>ast&#xA0;of</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;x</span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support constant dom js\"><span>type</span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span></span></div>\n</code></pre>\n<h3 id=\"-ast-stream-program-\"><code>ast = stream.program</code></h3>\n<p>The full program&apos;s AST, which will be updated with each incoming token.</p>\n<h3 id=\"-ast-require-glsl-parser-direct-tokens-\"><code>ast = require(&apos;glsl-parser/direct&apos;)(tokens)</code></h3>\n<p>Synchronously parses an array of tokens from <code>glsl-tokenizer</code>.</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;TokenString&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>glsl-tokenizer/string</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;ParseTokens&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>glsl-parser/direct</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;fs&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>fs</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;src&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;fs</span><span class=\"meta delimiter method period js\"><span>.</span></span><span>readFileSync</span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>test.glsl</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>utf8</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;tokens&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;TokenString</span><span class=\"meta brace round js\"><span>(</span></span><span>src</span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage modifier js\"><span>var</span></span><span>&#xA0;ast&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;ParseTokens</span><span class=\"meta brace round js\"><span>(</span></span><span>tokens</span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js console\"><span>log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>ast</span><span class=\"meta brace round js\"><span>)</span></span></span></div>\n</code></pre>\n<h2 id=\"nodes\">Nodes</h2>\n<ul>\n<li><code>stmtlist</code></li>\n<li><code>stmt</code></li>\n<li><code>struct</code></li>\n<li><code>function</code></li>\n<li><code>functionargs</code></li>\n<li><code>decl</code></li>\n<li><code>decllist</code></li>\n<li><code>forloop</code></li>\n<li><code>whileloop</code></li>\n<li><code>if</code></li>\n<li><code>expr</code></li>\n<li><code>precision</code></li>\n<li><code>comment</code></li>\n<li><code>preprocessor</code></li>\n<li><code>keyword</code></li>\n<li><code>ident</code></li>\n<li><code>return</code></li>\n<li><code>continue</code></li>\n<li><code>break</code></li>\n<li><code>discard</code></li>\n<li><code>do-while</code></li>\n<li><code>binary</code></li>\n<li><code>ternary</code></li>\n<li><code>unary</code></li>\n</ul>\n<h2 id=\"known-issues\">Known Issues</h2>\n<ul>\n<li><p>because i am not smart enough to write a fully streaming parser, the current parser &quot;cheats&quot; a bit when it encounters a <code>expr</code> node! it actually waits until it has all the tokens it needs to build a tree for a given expression, then builds it and emits the constituent child nodes in the expected order. the <code>expr</code> parsing is heavily influenced by <a href=\"http://javascript.crockford.com/tdop/tdop.html\">crockford&apos;s tdop article</a>. the rest of the parser is heavily influenced by fever dreams.</p>\n</li>\n<li><p>the parser might hit a state where it&apos;s looking at what <em>could be</em> an expression, or it could be a declaration --\nthat is, the statement starts with a previously declared <code>struct</code>. it&apos;ll opt to pretend it&apos;s a declaration, but that\nmight not be the case -- it might be a user-defined constructor starting a statement!</p>\n</li>\n<li><p>&quot;unhygenic&quot; <code>#if</code> / <code>#endif</code> macros are completely unhandled at the moment, since they&apos;re a bit of a pain.\nif you&apos;ve got unhygenic macros in your code, move the #if / #endifs to statement level, and have them surround\nwholly parseable code. this sucks, and i am sorry.</p>\n</li>\n</ul>\n<h2 id=\"license\">License</h2>\n<p>MIT, see <a href=\"http://github.com/stackgl/glsl-parser/blob/master/LICENSE.md\">LICENSE.md</a> for more details.</p>\n"}