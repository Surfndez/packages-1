{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/stackgl/headless-gl\">gl</a><div class=\"contrib\"></div></h1>\n<p><code>gl</code> lets you create a WebGL context in node.js without making a window or loading a full browser environment.</p>\n<p>It aspires to fully conform to the <a href=\"https://www.khronos.org/registry/webgl/specs/1.0.3/\">WebGL 1.0.3 specification</a>.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Create&#xA0;context</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;width&#xA0;&#xA0;&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>64</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;height&#xA0;&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>64</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;gl&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>gl</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span><span>(</span></span><span>width</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;height</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&#xA0;preserveDrawingBuffer</span><span class=\"keyword operator js\"><span>:</span></span><span>&#xA0;</span><span class=\"constant language boolean true js\"><span>true</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Clear&#xA0;screen&#xA0;to&#xA0;red</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>gl</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>clearColor</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>gl</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js console\"><span>clear</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>gl</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"constant other property js\"><span>COLOR_BUFFER_BIT</span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Write&#xA0;output&#xA0;as&#xA0;a&#xA0;PPM&#xA0;formatted&#xA0;image</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;pixels&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta class instance constructor\"><span class=\"keyword operator new js\"><span>new</span></span><span>&#xA0;</span><span class=\"entity name type instance js\"><span>Uint8Array</span></span></span><span class=\"meta brace round js\"><span>(</span></span><span>width&#xA0;</span><span class=\"keyword operator js\"><span>*</span></span><span>&#xA0;height&#xA0;</span><span class=\"keyword operator js\"><span>*</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>4</span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>gl</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>readPixels</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;width</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;height</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>gl</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"constant other property js\"><span>RGBA</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>gl</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"constant other property js\"><span>UNSIGNED_BYTE</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;pixels</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>stdout</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>write</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>P3</span><span class=\"constant character escape js\"><span>\\n</span></span><span>#&#xA0;gl.ppm</span><span class=\"constant character escape js\"><span>\\n</span></span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;width</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>&#xA0;</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;height</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span class=\"constant character escape js\"><span>\\n</span></span><span>255</span><span class=\"constant character escape js\"><span>\\n</span></span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>join</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>for</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;i</span><span class=\"keyword operator assignment js\"><span>=</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;i</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span class=\"variable other object js\"><span>pixels</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support constant js\"><span>length</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;i</span><span class=\"keyword operator assignment compound js\"><span>+=</span></span><span class=\"constant numeric js\"><span>4</span></span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"keyword control js\"><span>for</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;j</span><span class=\"keyword operator assignment js\"><span>=</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;j</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span class=\"constant numeric js\"><span>3</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"keyword operator increment js\"><span>++</span></span><span>j</span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"variable other object js\"><span>process</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>stdout</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>write</span></span><span class=\"meta brace round js\"><span>(</span></span><span>pixels</span><span class=\"meta brace square js\"><span>[</span></span><span>i</span><span class=\"keyword operator js\"><span>+</span></span><span>j</span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;</span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>&#xA0;</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div>\n</code></pre>\n<h2 id=\"install\">Install</h2>\n<p>Because <code>gl</code> uses native code, it is a bit more involved to set up than a typical JavaScript npm module.  Before you can use it, you will need to ensure that your system has the correct dependencies installed.</p>\n<h3 id=\"system-dependencies\">System dependencies</h3>\n<p>For general information on building native modules, see the <a href=\"https://github.com/nodejs/node-gyp\"><code>node-gyp</code></a> documentation. System specific build instructions are as follows:</p>\n<h4 id=\"mac-os-x\">Mac OS X</h4>\n<ul>\n<li>Python 2.7</li>\n<li>XCode</li>\n</ul>\n<h4 id=\"ubuntu-debian\">Ubuntu/Debian</h4>\n<ul>\n<li>Python 2.7</li>\n<li>A GNU C++ environment (available via the <code>build-essential</code> package on <code>apt</code>)</li>\n<li>libxi-dev</li>\n<li>Working and up to date OpenGL drivers</li>\n<li>GLEW</li>\n</ul>\n<pre><code>$ sudo apt-get install -y build-essential libxi-dev libglu1-mesa-dev\n</code></pre><h4 id=\"windows\">Windows</h4>\n<ul>\n<li>Python 2.7</li>\n<li>Microsoft Visual Studio</li>\n</ul>\n<h3 id=\"npm\">npm</h3>\n<p>Once your system is set up, installing the <code>headless-gl</code> module is pretty easy to do with <a href=\"http://docs.npmjs.org\">npm</a>.  Just run the following command:</p>\n<pre><code>npm i gl\n</code></pre><p>And you are good to go!</p>\n<h2 id=\"api\">API</h2>\n<h3 id=\"context-creation\">Context creation</h3>\n<h4 id=\"-var-gl-require-gl-width-height-options-\"><code>var gl = require(&apos;gl&apos;)(width, height[, options])</code></h4>\n<p>Creates a new <code>WebGLRenderingContext</code> with the given parameters.</p>\n<ul>\n<li><code>width</code> is the width of the drawing buffer</li>\n<li><code>height</code> is the height of the drawing buffer</li>\n<li><code>options</code> is an optional object whose properties are the context attributes for the WebGLRendering context</li>\n</ul>\n<p><strong>Returns</strong> A new <code>WebGLRenderingContext</code> object</p>\n<h3 id=\"extra-methods\">Extra methods</h3>\n<p>In addition to all of the usual WebGL methods, <code>headless-gl</code> adds the following two methods to each WebGL context in order to support some functionality which would not otherwise be exposed at the WebGL level.</p>\n<h4 id=\"-gl-resize-width-height-\"><code>gl.resize(width, height)</code></h4>\n<p>Resizes the drawing buffer of a WebGL rendering context</p>\n<ul>\n<li><code>width</code> is the new width of the drawing buffer for the context</li>\n<li><code>height</code> is the new height of the drawing buffer for the context</li>\n</ul>\n<p><strong>Note</strong> In the DOM, this method would implemented by resizing the canvas, which is done by modifying the <code>width/height</code> properties.</p>\n<h4 id=\"-gl-destroy-\"><code>gl.destroy()</code></h4>\n<p>Destroys the WebGL context immediately, reclaiming all resources</p>\n<p><strong>Note</strong> For long running jobs, garbage collection of contexts is often not fast enough.  To prevent the system from becoming overloaded with unused contexts, you can force the system to reclaim a WebGL context immediately by calling <code>.destroy()</code>.</p>\n<h2 id=\"more-information\">More information</h2>\n<h3 id=\"improvements-from-version-1-0-0\">Improvements from version 1.0.0</h3>\n<p>The previous version of <code>gl</code> (aka <code>headless-gl</code>) was pretty much a terrible hack. Thanks to the support of @mapbox and @google&apos;s ANGLE project, <code>gl</code> is now actually kind of good!  The following things are now way better in version &gt;=2.0.0:</p>\n<ul>\n<li>Vastly improved conformance</li>\n<li>Khronos ARB test suite integration via <code>gl-conformance</code></li>\n<li>Works on node 0.12</li>\n<li>Windows and Linux support</li>\n<li>No default context</li>\n<li>Added <code>.destroy()</code> and <code>.resize()</code> methods</li>\n</ul>\n<h3 id=\"why-use-this-thing-instead-of-node-webgl-\">Why use this thing instead of <code>node-webgl</code>?</h3>\n<p>It depends on what you are trying to do.  <a href=\"https://github.com/mikeseven/node-webgl\">node-webgl</a> is good if you are making a graphical application like a game, and allows for access to some features which are not part of ordinary WebGL.  On the other hand, because headless-gl does not create any windows, it is suitable for running in a server environment.  This means that you can use it to generate figures using OpenGL or perform GPGPU computations using shaders. Also, unlike <code>node-webgl</code>, <code>headless-gl</code> attempts to correctly implement the full WebGL standard making it more reliable.</p>\n<h3 id=\"why-use-this-thing-instead-of-nw-js-electron-atom-shell-chromium-\">Why use this thing instead of <code>nw.js</code>/electron/atom shell/Chromium?</h3>\n<p><code>nw.js</code> is good if you need a full DOM implementation.  On the other hand, because it is a larger dependency it can be more difficult to set up and configure.  <code>headless-gl</code> is lighter weight and more modular in the sense that it just implements WebGL and nothing else.</p>\n<h3 id=\"how-are-image-and-video-elements-implemented-\">How are <code>&lt;image&gt;</code> and <code>&lt;video&gt;</code> elements implemented?</h3>\n<p>They aren&apos;t for now.  If you want to upload data to a texture, you will need to unpack the pixels into a <code>Uint8Array</code> and feed it into <code>texImage2D</code>.</p>\n<h3 id=\"what-extensions-are-supported-\">What extensions are supported?</h3>\n<p>See <a href=\"https://github.com/stackgl/headless-gl/issues/5\">https://github.com/stackgl/headless-gl/issues/5</a> for current status.</p>\n<h3 id=\"how-is-the-development-environment-set-up-\">How is the development environment set up?</h3>\n<ol>\n<li>Clone this repo: <code>git clone git@github.com:stackgl/headless-gl.git</code></li>\n<li>Switch to the headless gl directory: <code>cd headless-gl</code></li>\n<li>Initialize the angle submodule: <code>git submodule init</code></li>\n<li>Update the angle submodule: <code>git submodule update</code></li>\n<li>Install npm dependencies: <code>npm install</code></li>\n<li>Run node-gyp to generate build scripts: <code>npm run build</code></li>\n</ol>\n<p>Once this is done, you should be good to go!  A few more things</p>\n<ul>\n<li>To run the test cases, use the command <code>npm test</code>, or execute specific by just running it using node.</li>\n<li>On a Unix-like platform, you can do incremental rebuilds by going into the <code>build/</code> directory and running <code>make</code></li>\n</ul>\n<p>This should work on most environments, but hasn&apos;t been tested thoroughly with windows.</p>\n<h3 id=\"how-can-headless-gl-be-used-on-a-headless-linux-machine-\">How can <code>headless-gl</code> be used on a headless Linux machine?</h3>\n<p>A minimal server install of Linux, such as the one one would want to use on\nAmazon AWS or equivalent will likely not provide an X11 nor an OpenGL\nenvironment. To setup such an environment you can use those two packages:</p>\n<ol>\n<li><a href=\"https://en.wikipedia.org/wiki/Xvfb\">Xvfb</a> is a lightweight X11 server which\nprovides a back buffer for displaying X11 application offscreen and reading\nback the pixels which were drawn offscreen. It is typically used in\nContinuous Integration systems. It can be installed on CentOS with <code>yum\ninstall -y Xvfb</code></li>\n<li><a href=\"http://www.mesa3d.org/intro.html\">Mesa</a> is the reference open source\nsoftware implementation of OpenGL. It can be installed on CentOS with <code>yum\ninstall -y mesa-dri-drivers</code>. Since a cloud Linux instance will typically\nrun on a machine that does not have a GPU, a software implementation of\nOpenGL will be required.</li>\n</ol>\n<p>Interacting with <code>Xvfb</code> requires to start it on the background and to execute\nyour <code>node</code> program with the DISPLAY environment variable set to whatever was\nconfigured when running Xvfb (the default being :99). If you want to do that\nreliably you&apos;ll have to start Xvfb from an init.d script at boot time, which is\nextra configuration burden. Fortunately there is a wrapper script shipped with\nXvfb known as <code>xvfb-run</code> which can start Xvfb on the fly, execute your node\nprogram and finally shut Xvfb down. Here&apos;s how to run it:</p>\n<pre><code>xvfb-run -s &quot;-ac -screen 0 1280x1024x24&#x201D; &lt;node program&gt;\n</code></pre><h2 id=\"license\">License</h2>\n<p>See LICENSES</p>\n"}